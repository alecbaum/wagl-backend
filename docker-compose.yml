version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: wagl-postgres
    environment:
      POSTGRES_DB: wagldb
      POSTGRES_USER: waglmin
      POSTGRES_PASSWORD: localdev123
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "9002:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - wagl-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U waglmin -d wagldb"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: wagl-redis
    ports:
      - "9003:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - wagl-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Wagl Backend API
  api:
    build:
      context: .
      dockerfile: src/WaglBackend.Api/Dockerfile
    container_name: wagl-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__PostgreSQL=Host=postgres;Port=5432;Database=wagldb;Username=waglmin;Password=localdev123;SSL Mode=Prefer;
      - ConnectionStrings__Redis=redis:6379
      - JwtConfiguration__SecretKey=your-super-secure-secret-key-for-jwt-tokens-minimum-256-bits-long-for-hs256
      - JwtConfiguration__Issuer=WaglBackendAPI
      - JwtConfiguration__Audience=WaglBackendClient
      - JwtConfiguration__ExpirationMinutes=60
      - JwtConfiguration__RefreshTokenExpirationDays=7
      - RedisConfiguration__ConnectionString=redis:6379
      - RedisConfiguration__KeyPrefix=wagl
      - RedisConfiguration__DefaultExpirationMinutes=30
    ports:
      - "9001:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - wagl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # pgAdmin (Optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: wagl-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@wagl.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - wagl-network
    restart: unless-stopped
    profiles:
      - tools

  # Redis Commander (Optional - for Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: wagl-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - wagl-network
    restart: unless-stopped
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  wagl-network:
    driver: bridge