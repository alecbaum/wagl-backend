// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WaglBackend.Infrastructure.Persistence.Context;

#nullable disable

namespace WaglBackend.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250917224544_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.ApiUsageLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<int>("RequestSize")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RequestTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<int>("ResponseSize")
                        .HasColumnType("integer");

                    b.Property<int>("ResponseStatusCode")
                        .HasColumnType("integer");

                    b.Property<long>("ResponseTimeMs")
                        .HasColumnType("bigint");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountType");

                    b.HasIndex("Endpoint");

                    b.HasIndex("ProviderId");

                    b.HasIndex("RequestTimestamp");

                    b.HasIndex("ResponseStatusCode");

                    b.HasIndex("UserId");

                    b.HasIndex("AccountType", "RequestTimestamp");

                    b.HasIndex("Endpoint", "RequestTimestamp");

                    b.HasIndex("ProviderId", "RequestTimestamp");

                    b.HasIndex("UserId", "RequestTimestamp");

                    b.ToTable("ApiUsageLogs", (string)null);
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatRoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatSessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipantId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("ChatSessionId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_ChatMessages_IsDeleted");

                    b.HasIndex("ParticipantId")
                        .HasDatabaseName("IX_ChatMessages_ParticipantId");

                    b.HasIndex("ParticipantId1");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("IX_ChatMessages_RoomId");

                    b.HasIndex("SentAt")
                        .HasDatabaseName("IX_ChatMessages_SentAt");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("IX_ChatMessages_SessionId");

                    b.HasIndex("ParticipantId", "SentAt")
                        .HasDatabaseName("IX_ChatMessages_ParticipantId_SentAt");

                    b.HasIndex("RoomId", "SentAt")
                        .HasDatabaseName("IX_ChatMessages_RoomId_SentAt");

                    b.HasIndex("SessionId", "SentAt")
                        .HasDatabaseName("IX_ChatMessages_SessionId_SentAt");

                    b.ToTable("ChatMessages", (string)null);
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.ChatRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatSessionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxParticipants")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(6);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ParticipantCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ChatSessionId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ChatRooms_CreatedAt");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("IX_ChatRooms_SessionId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ChatRooms_Status");

                    b.HasIndex("SessionId", "ParticipantCount")
                        .HasDatabaseName("IX_ChatRooms_SessionId_ParticipantCount");

                    b.HasIndex("SessionId", "Status")
                        .HasDatabaseName("IX_ChatRooms_SessionId_Status");

                    b.ToTable("ChatRooms", null, t =>
                        {
                            t.HasCheckConstraint("CK_ChatRooms_MaxParticipants", "[MaxParticipants] > 0");

                            t.HasCheckConstraint("CK_ChatRooms_ParticipantCount", "[ParticipantCount] >= 0");

                            t.HasCheckConstraint("CK_ChatRooms_ParticipantCount_Limit", "[ParticipantCount] <= [MaxParticipants]");
                        });
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.ChatSession", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxParticipants")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(36);

                    b.Property<int>("MaxParticipantsPerRoom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(6);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("ScheduledStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ChatSessions_CreatedAt");

                    b.HasIndex("ScheduledStartTime")
                        .HasDatabaseName("IX_ChatSessions_ScheduledStartTime");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ChatSessions_Status");

                    b.HasIndex("Status", "ScheduledStartTime")
                        .HasDatabaseName("IX_ChatSessions_Status_ScheduledStartTime");

                    b.ToTable("ChatSessions", (string)null);
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatRoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatSessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConnectionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("UserGuidId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("ChatSessionId");

                    b.HasIndex("ConnectionId")
                        .HasDatabaseName("IX_Participants_ConnectionId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Participants_IsActive");

                    b.HasIndex("JoinedAt")
                        .HasDatabaseName("IX_Participants_JoinedAt");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("IX_Participants_RoomId");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("IX_Participants_SessionId");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Participants_Type");

                    b.HasIndex("UserGuidId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Participants_UserId");

                    b.HasIndex("RoomId", "IsActive")
                        .HasDatabaseName("IX_Participants_RoomId_IsActive");

                    b.HasIndex("SessionId", "IsActive")
                        .HasDatabaseName("IX_Participants_SessionId_IsActive");

                    b.HasIndex("UserId", "SessionId")
                        .HasDatabaseName("IX_Participants_UserId_SessionId");

                    b.HasIndex("UserId", "SessionId", "IsActive")
                        .HasDatabaseName("IX_Participants_UserId_SessionId_IsActive")
                        .HasFilter("[UserId] IS NOT NULL AND [IsActive] = 1");

                    b.ToTable("Participants", (string)null);
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<string[]>("AllowedIpAddresses")
                        .HasColumnType("jsonb");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("LastAccessedAt");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Providers", (string)null);
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.SessionInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatSessionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ConsumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConsumedByName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ConsumedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InviteeEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("InviteeName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsConsumed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ChatSessionId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_SessionInvites_CreatedAt");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_SessionInvites_ExpiresAt");

                    b.HasIndex("IsConsumed")
                        .HasDatabaseName("IX_SessionInvites_IsConsumed");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("IX_SessionInvites_SessionId");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("IX_SessionInvites_Token");

                    b.HasIndex("IsConsumed", "ExpiresAt")
                        .HasDatabaseName("IX_SessionInvites_IsConsumed_ExpiresAt");

                    b.HasIndex("SessionId", "IsConsumed")
                        .HasDatabaseName("IX_SessionInvites_SessionId_IsConsumed");

                    b.ToTable("SessionInvites", (string)null);
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.TierFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<int?>("DailyLimit")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("FeatureFlag")
                        .HasColumnType("bigint");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int?>("RateLimitPerHour")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredTier")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FeatureName");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("RequiredTier");

                    b.HasIndex("FeatureName", "RequiredTier")
                        .IsUnique();

                    b.HasIndex("RequiredTier", "IsEnabled");

                    b.ToTable("TierFeatures", (string)null);
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubscriptionExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("WaglBackend.Infrastructure.Persistence.Context.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("RevokedReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("IsRevoked");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "IsRevoked", "ExpiresAt");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WaglBackend.Core.Atoms.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WaglBackend.Core.Atoms.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaglBackend.Core.Atoms.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WaglBackend.Core.Atoms.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.ApiUsageLog", b =>
                {
                    b.HasOne("WaglBackend.Core.Atoms.Entities.Provider", "Provider")
                        .WithMany("ApiUsageLogs")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WaglBackend.Core.Atoms.Entities.User", "User")
                        .WithMany("ApiUsageLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Provider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.ChatMessage", b =>
                {
                    b.HasOne("WaglBackend.Core.Atoms.Entities.ChatRoom", "ChatRoom")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaglBackend.Core.Atoms.Entities.ChatSession", "ChatSession")
                        .WithMany()
                        .HasForeignKey("ChatSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaglBackend.Core.Atoms.Entities.Participant", null)
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaglBackend.Core.Atoms.Entities.Participant", "Participant")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ParticipantId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaglBackend.Core.Atoms.Entities.ChatRoom", null)
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaglBackend.Core.Atoms.Entities.ChatSession", null)
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("ChatSession");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.ChatRoom", b =>
                {
                    b.HasOne("WaglBackend.Core.Atoms.Entities.ChatSession", "ChatSession")
                        .WithMany("ChatRooms")
                        .HasForeignKey("ChatSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaglBackend.Core.Atoms.Entities.ChatSession", null)
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatSession");
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.Participant", b =>
                {
                    b.HasOne("WaglBackend.Core.Atoms.Entities.ChatRoom", "ChatRoom")
                        .WithMany("Participants")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaglBackend.Core.Atoms.Entities.ChatSession", "ChatSession")
                        .WithMany()
                        .HasForeignKey("ChatSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaglBackend.Core.Atoms.Entities.ChatRoom", null)
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaglBackend.Core.Atoms.Entities.ChatSession", null)
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaglBackend.Core.Atoms.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserGuidId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ChatRoom");

                    b.Navigation("ChatSession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.Provider", b =>
                {
                    b.OwnsOne("WaglBackend.Core.Atoms.ValueObjects.ApiKey", "ApiKey", b1 =>
                        {
                            b1.Property<Guid>("ProviderId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("ApiKeyCreatedAt");

                            b1.Property<string>("HashedValue")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("ApiKeyHash");

                            b1.Property<string>("Value")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("ApiKeyValue");

                            b1.HasKey("ProviderId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasFilter("\"ApiKeyValue\" IS NOT NULL");

                            b1.ToTable("Providers");

                            b1.WithOwner()
                                .HasForeignKey("ProviderId");
                        });

                    b.Navigation("ApiKey");
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.SessionInvite", b =>
                {
                    b.HasOne("WaglBackend.Core.Atoms.Entities.ChatSession", "ChatSession")
                        .WithMany("SessionInvites")
                        .HasForeignKey("ChatSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaglBackend.Core.Atoms.Entities.ChatSession", null)
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatSession");
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.User", b =>
                {
                    b.OwnsOne("WaglBackend.Core.Atoms.ValueObjects.TierLevel", "TierLevel", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Tier")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(1)
                                .HasColumnName("TierLevel");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("TierLevel")
                        .IsRequired();
                });

            modelBuilder.Entity("WaglBackend.Infrastructure.Persistence.Context.RefreshToken", b =>
                {
                    b.HasOne("WaglBackend.Core.Atoms.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.ChatRoom", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.ChatSession", b =>
                {
                    b.Navigation("ChatRooms");

                    b.Navigation("SessionInvites");
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.Participant", b =>
                {
                    b.Navigation("ChatMessages");
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.Provider", b =>
                {
                    b.Navigation("ApiUsageLogs");
                });

            modelBuilder.Entity("WaglBackend.Core.Atoms.Entities.User", b =>
                {
                    b.Navigation("ApiUsageLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
